import axios from 'axios';

/**
 * Process OCR text with Azure OpenAI Service
 * @param {string} ocrText - The text extracted from OCR
 * @param {string} prompt - The prompt template with {{OCR_RESULT}} placeholder
 * @param {Object} config - The Azure OpenAI configuration
 * @param {string} config.endpoint - The Azure OpenAI endpoint
 * @param {string} config.apiKey - The Azure OpenAI API key
 * @param {string} config.deploymentName - The model deployment name
 * @returns {Promise<string>} - The generated text from Azure OpenAI
 */
export const processWithAzureOpenAI = async (ocrText, prompt, config) => {
  if (!ocrText) {
    throw new Error('OCRテキストが提供されていません');
  }

  if (!prompt) {
    throw new Error('プロンプトが提供されていません');
  }

  if (!config || !config.endpoint || !config.apiKey || !config.deploymentName) {
    throw new Error('Azure OpenAIの設定が不完全です');
  }

  // Replace placeholder in the prompt with actual OCR text
  const fullPrompt = prompt.replace('{{OCR_RESULT}}', ocrText);

  try {
    // Azure OpenAI APIのリクエスト形式
    const requestData = {
      messages: [
        {
          role: 'system',
          content: '問診票の内容を整理して構造化してください。段落を適切に分け、重要な医療情報を見やすく整形してください。'
        },
        {
          role: 'user',
          content: fullPrompt
        }
      ],
      temperature: 0.2, // より正確な回答のために低めの温度設定
      max_tokens: 2000,  // 十分な長さの回答を得るため
      top_p: 0.95,
      frequency_penalty: 0,
      presence_penalty: 0
    };

    console.log('Azure OpenAI request data:', JSON.stringify(requestData));

    // Azure OpenAIへのリクエストエンドポイント設定
    // 複数のAPI仕様・バージョンに対応
    const apiVersions = ['2023-12-01-preview', '2023-05-15', '2022-12-01'];
    const apiVersion = apiVersions[0]; // 最新版をデフォルトとして使用
    
    // エンドポイントの正規化
    let baseEndpoint = config.endpoint.trim();
    // プロトコルが含まれていない場合は追加
    if (!baseEndpoint.startsWith('http')) {
      baseEndpoint = `https://${baseEndpoint}`;
    }
    // 末尾のスラッシュを削除
    baseEndpoint = baseEndpoint.endsWith('/') ? baseEndpoint.slice(0, -1) : baseEndpoint;
    
    // 複数の可能なエンドポイント形式を定義
    const possibleEndpoints = [
      // 標準形式
      `${baseEndpoint}/openai/deployments/${config.deploymentName}/chat/completions?api-version=${apiVersion}`,
      // 旧形式
      `${baseEndpoint}/deployments/${config.deploymentName}/chat/completions?api-version=${apiVersion}`,
      // 地域固有形式
      `${baseEndpoint}/openai/chat/completions?api-version=${apiVersion}&deployment=${config.deploymentName}`
    ];
    
    console.log('試行する可能性のあるエンドポイント形式:', possibleEndpoints);
    
    let response = null;
    let lastError = null;
    
    // 順番に全てのエンドポイント形式を試行
    for (let i = 0; i < possibleEndpoints.length; i++) {
      const currentEndpoint = possibleEndpoints[i];
      console.log(`エンドポイント形式 ${i+1}/${possibleEndpoints.length} を試行中:`, currentEndpoint);
      
      try {
        const resp = await axios.post(currentEndpoint, requestData, {
          headers: {
            'Content-Type': 'application/json',
            'api-key': config.apiKey,
            'Accept': 'application/json',
            'Ocp-Apim-Subscription-Key': config.apiKey // 一部の地域で必要
          },
          timeout: 20000 // タイムアウトを増やす
        });
        
        console.log(`エンドポイント形式 ${i+1} で成功!`);
        response = resp;
        break; // 成功したらループを抜ける
      } catch (error) {
        console.log(`エンドポイント形式 ${i+1} で失敗:`, error.message);
        lastError = error;
        // エラーが発生しても次のエンドポイントを試す
      }
    }
    
    // 全てのエンドポイントが失敗した場合
    if (!response) {
      console.error('全てのエンドポイント形式で接続に失敗しました');
      throw lastError || new Error('Azure OpenAIへの接続に失敗しました');
    }
    
    // 成功レスポンスの処理
    if (response.data && response.data.choices && response.data.choices.length > 0) {
      return response.data.choices[0].message.content;
    } else {
      console.error('Unexpected Azure OpenAI response format:', response.data);
      throw new Error('予期しないAzure OpenAI応答フォーマット');
    }
  } catch (error) {
    console.error('Azure OpenAI API error:', error);
    
    // CORSの問題がある可能性を確認
    if (error.message && error.message.includes('CORS')) {
      console.error('CORSエラーが発生した可能性があります。プロキシサーバーの使用を検討してください。');
    }
    
    // 詳細なエラー情報を表示
    if (error.response) {
      console.error('Azure OpenAI API response status:', error.response.status);
      console.error('Azure OpenAI API response data:', error.response.data);
      console.error('Azure OpenAI API response headers:', error.response.headers);
      
      // 広くエラーメッセージを探索
      let errorMessage = '';
      const errorData = error.response.data;
      
      if (errorData) {
        if (typeof errorData === 'string') {
          errorMessage = errorData;
        } else if (errorData.error && errorData.error.message) {
          errorMessage = errorData.error.message;
        } else if (errorData.error && errorData.error.innerError && errorData.error.innerError.message) {
          errorMessage = errorData.error.innerError.message;
        } else if (errorData.message) {
          errorMessage = errorData.message;
        } else if (errorData.error && typeof errorData.error === 'string') {
          errorMessage = errorData.error;
        } else {
          errorMessage = JSON.stringify(errorData);
        }
      }
      
      if (error.response.status === 401) {
        throw new Error(`Azure OpenAI認証エラー: APIキーが正しくないか期限切れの可能性があります`);
      } else if (error.response.status === 404) {
        throw new Error(`Azure OpenAIエンドポイントが見つかりません: エンドポイントURLまたはデプロイメント名を確認してください`);
      } else {
        throw new Error(`Azure OpenAIエラー (${error.response.status}): ${errorMessage || error.message || '不明なエラー'}`);
      }
    } else if (error.request) {
      // リクエストは送信されたが、応答が存在しない場合
      console.error('Azure OpenAI API no response received:', error.request);
      throw new Error(`Azure OpenAIから応答がありませんでした。エンドポイントのアクセス性やネットワーク接続を確認してください: ${config.endpoint}`);
    } else {
      // リクエストの作成中に発生したエラー
      console.error('Azure OpenAI request setup error:', error.message);
      throw new Error(`Azure OpenAIリクエスト作成エラー: ${error.message || error}`);
    }
  }
};

// 後方互換性のために元の関数名を維持
export const processWithLocalLLM = processWithAzureOpenAI;
export const processWithChatGPT = processWithAzureOpenAI;
export const processWithCopilot = processWithAzureOpenAI;

/**
 * Test connection to Azure OpenAI Service
 * @param {Object} config - The Azure OpenAI configuration
 * @param {string} config.endpoint - The Azure OpenAI endpoint
 * @param {string} config.apiKey - The Azure OpenAI API key
 * @param {string} config.deploymentName - The model deployment name
 * @returns {Promise<boolean>} - Whether the connection was successful
 */
export const testAzureOpenAIConnection = async (config) => {
  try {
    if (!config || !config.endpoint || !config.apiKey || !config.deploymentName) {
      console.error('Azure OpenAIの設定が不完全です');
      return false;
    }
    
    // 設定内容をログ出力（APIキーはマスク）
    console.log('Azure OpenAI設定確認:', { 
      endpoint: config.endpoint,
      apiKey: config.apiKey ? '***' + config.apiKey.substr(-4) : undefined, // 最後の4文字のみ表示
      deploymentName: config.deploymentName
    });

    // Simple test request to Azure OpenAI
    const requestData = {
      messages: [
        {
          role: 'user',
          content: '簡単なテストです。「接続成功」と返してください。'
        }
      ],
      max_tokens: 50,
      temperature: 0.0
    };

    console.log('Azure OpenAI connection test request:', JSON.stringify(requestData));

    // Azure OpenAIへのリクエストエンドポイント設定
    // 複数のAPI仕様・バージョンに対応
    const apiVersions = ['2023-12-01-preview', '2023-05-15', '2022-12-01'];
    const apiVersion = apiVersions[0]; // 最新版をデフォルトとして使用
    
    // エンドポイントの正規化
    let baseEndpoint = config.endpoint.trim();
    // プロトコルが含まれていない場合は追加
    if (!baseEndpoint.startsWith('http')) {
      baseEndpoint = `https://${baseEndpoint}`;
    }
    // 末尾のスラッシュを削除
    baseEndpoint = baseEndpoint.endsWith('/') ? baseEndpoint.slice(0, -1) : baseEndpoint;
    
    // 複数の可能なエンドポイント形式を定義
    const possibleEndpoints = [
      // 標準形式
      `${baseEndpoint}/openai/deployments/${config.deploymentName}/chat/completions?api-version=${apiVersion}`,
      // 旧形式
      `${baseEndpoint}/deployments/${config.deploymentName}/chat/completions?api-version=${apiVersion}`,
      // 地域固有形式
      `${baseEndpoint}/openai/chat/completions?api-version=${apiVersion}&deployment=${config.deploymentName}`
    ];
    
    console.log('試行する可能性のあるエンドポイント形式:', possibleEndpoints);
    
    // 順番に全てのエンドポイント形式を試行
    for (let i = 0; i < possibleEndpoints.length; i++) {
      const currentEndpoint = possibleEndpoints[i];
      console.log(`エンドポイント形式 ${i+1}/${possibleEndpoints.length} を試行中:`, currentEndpoint);
      
      try {
        const response = await axios.post(currentEndpoint, requestData, {
          headers: {
            'Content-Type': 'application/json',
            'api-key': config.apiKey,
            'Accept': 'application/json',
            'Ocp-Apim-Subscription-Key': config.apiKey // 一部の地域で必要
          },
          timeout: 20000 // タイムアウトを増やす
        });
        
        console.log(`エンドポイント形式 ${i+1} でのテスト成功!`, response.data);
        return true; // 成功したらtrueを返す
      } catch (error) {
        console.log(`エンドポイント形式 ${i+1} でのテスト失敗:`, error.message);
        
        // 詳細なエラー情報をログ出力
        if (error.response) {
          console.error(`エンドポイント ${i+1} 応答ステータス:`, error.response.status);
          console.error(`エンドポイント ${i+1} 応答データ:`, error.response.data);
        }
        
        // エラーが発生しても次のエンドポイントを試す
      }
    }
    
    // 全てのエンドポイントが失敗した場合
    console.error('全てのエンドポイント形式でテスト接続に失敗しました');
    return false;
  } catch (error) {
    console.error('Azure OpenAI connection test error:', error);
    if (error.response) {
      console.error('Azure OpenAI response data:', error.response.data);
      console.error('Azure OpenAI response status:', error.response.status);
    }
    return false;
  }
};

// 後方互換性のために元の関数名を維持
export const testLLMConnection = testAzureOpenAIConnection;
export const testOpenAIConnection = testAzureOpenAIConnection;
export const testCopilotConnection = testAzureOpenAIConnection;
